{"version":3,"sources":["components/ContactsItem/ContactsItem.module.css","components/Filter/Filter.module.css","transitions/list.module.css","components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","transitions/pop.module.css","components/App/App.module.css","components/ContactsItem/ContactsItem.js","redux/types.js","redux/action.js","components/ContactsItem/ContactsItemContainer.js","components/ContactList/ContactList.js","redux/selector.js","components/ContactList/ContactListContainer.js","components/ContactForm/ContactForm.js","components/ContactForm/ContactFormContainer.js","components/Filter/Filter.js","components/Filter/FilterContainer.js","components/Logo/Logo.js","components/App/App.js","redux/reducer.js","redux/store.js","index.js"],"names":["module","exports","ContactsItem","name","number","id","deleteContact","className","styles","item","type","onClick","button","Type","addContact","createAction","contact","payload","shortid","generate","filterContact","value","connect","dispatch","filter","actions","ContactsList","contacts","filteredContacts","toLowerCase","includes","filterContacts","TransitionGroup","component","list","map","CSSTransition","timeout","unmountOnExit","key","classNames","TransitionList","ContactsItemContainer","getContact","state","getFilter","Contactform","handleChange","e","target","setState","handleSubmit","preventDefault","props","onAddContact","clearState","this","onSubmit","placeholder","onChange","Component","ContactForm","Filter","handleFilter","pop","in","length","container","input","Logo","appear","App","isVisible","setFilter","initialState","contactsReducer","createReducer","find","alert","filterReducer","combineReducers","persistConfig","storage","persistedReducer","persistReducer","store","createStore","devToolsEnhancer","persistor","persistStore","ReactDOM","render","loading","document","getElementById"],"mappings":"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","file":"static/js/main.666d5713.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactsItem_button__2wbbL\",\"item\":\"ContactsItem_item__2GoCW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Filter_container__1azsj\",\"input\":\"Filter_input__1VJZu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"list_enter__2fsXE\",\"enterActive\":\"list_enterActive__2w1vy\",\"exit\":\"list_exit__5RPzb\",\"exitActive\":\"list_exitActive__1Dk9y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__342uv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactForm_button__5FPVV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"pop_enter__2wIU_\",\"enterActive\":\"pop_enterActive__1IrPp\",\"exit\":\"pop_exit__1vQ90\",\"exitActive\":\"pop_exitActive__2NgJq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__6EJQ0\"};","import React from \"react\";\r\nimport styles from \"./ContactsItem.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ContactsItem = ({ name, number, id, deleteContact }) => {\r\n  const del = () => deleteContact(id);\r\n\r\n  return (\r\n    <li className={styles.item}>\r\n      <p>\r\n         <span> {name} {number}</span>\r\n        <button type=\"button\" onClick={del} className={styles.button}>\r\n          Delete\r\n        </button>\r\n      </p>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactsItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  id: PropTypes.string.isRequired,\r\n  deleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactsItem;","export const Type = {\r\n  ADD: \"ADD_CONTACT\",\r\n  DELETE: \"DELETE_CONTACT\",\r\n  FILTER: \"FILTER_CONTACT\",\r\n};","import { createAction } from \"@reduxjs/toolkit\";\r\nimport shortid from 'shortid';\r\nimport { Type } from \"./types\";\r\n\r\nexport const addContact = createAction(Type.ADD, contact => ({\r\n  payload: { id: shortid.generate(), ...contact },\r\n}));\r\n\r\nexport const deleteContact = createAction(Type.DELETE, id => ({\r\n  payload: id,\r\n}));\r\n\r\nexport const filterContact = createAction(Type.FILTER, value => ({\r\n  payload: value,\r\n}));\r\n\r\n","import ContactsItem from \"./ContactsItem\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../redux/action\";\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  deleteContact: (filter) => dispatch(actions.deleteContact(filter)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactsItem);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\nimport TransitionList from \"../../transitions/list.module.css\";\r\nimport styles from \"./ContactList.module.css\"\r\nimport ContactsItemContainer from \"../ContactsItem/ContactsItemContainer\";\r\n\r\nconst filterContacts = (contacts, filter) => {\r\n  return contacts.filter((contact) =>\r\n    contact.name.toLowerCase().includes(filter.toLowerCase())\r\n  );\r\n};\r\n\r\nconst ContactsList = ({ contacts, filter }) => {\r\n  const filteredContacts = filter ? filterContacts(contacts, filter) : contacts;\r\n\r\n  return (\r\n    <TransitionGroup component=\"ul\" className={styles.list}>\r\n      {filteredContacts.map(({ name, number, id }) => (\r\n        <CSSTransition\r\n          timeout={250}\r\n          unmountOnExit\r\n          key={id}\r\n          classNames={TransitionList}\r\n        >\r\n          <ContactsItemContainer name={name} number={number} id={id} />\r\n        </CSSTransition>\r\n      ))}\r\n    </TransitionGroup>\r\n  );\r\n};\r\n\r\nexport default ContactsList;\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  filter: PropTypes.string.isRequired,\r\n};","export const getContact = (state) => state.contacts;\r\nexport const getFilter = (state) => state.filter;","import { connect } from \"react-redux\";\r\n\r\nimport ContactsList from \"../ContactList/ContactList\";\r\nimport { getContact, getFilter } from \"../../redux/selector\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: getContact(state),\r\n  filter: getFilter(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(ContactsList);","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ContactForm.module.css';\r\nimport shortid from 'shortid';\r\n\r\nclass Contactform extends Component {\r\n  static propTypes = {\r\n    onAddContact: PropTypes.func.isRequired,\r\n  };\r\n\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleChange = e => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (this.state.name && this.state.number) {\r\n      this.props.onAddContact({ ...this.state, id: shortid() });\r\n    }\r\n    this.clearState();\r\n  };\r\n\r\n  clearState = () => {\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          placeholder=\"Введите имя\"\r\n          onChange={this.handleChange}\r\n          value={name}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          name=\"number\"\r\n          placeholder=\"Введите номер\"\r\n          onChange={this.handleChange}\r\n          value={number}\r\n        />\r\n        <button type=\"submit\" className={styles.button}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Contactform;","import { connect } from 'react-redux';\r\nimport { addContact } from '../../redux/action';\r\nimport ContactForm from './ContactForm';\r\n\r\nconst mapStateToProps = () => ({});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onAddContact: contact => dispatch(addContact(contact)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport pop from \"../../transitions/pop.module.css\";\r\nimport styles from \"./Filter.module.css\"\r\n\r\nconst Filter = ({ contacts, filter, handleFilter }) => (\r\n  <CSSTransition\r\n    classNames={pop}\r\n    timeout={250}\r\n    unmountOnExit\r\n    in={contacts.length > 1}\r\n  >\r\n    <div className={styles.container}>\r\n      <p>Поиск контакта по имени</p>\r\n      <input\r\n        className={styles.input}\r\n        placeholder=\"Поиск контакта по имени...\"\r\n        value={filter}\r\n        onChange={(e) => handleFilter(e.target.value)}\r\n      />\r\n    </div>\r\n  </CSSTransition>\r\n);\r\n\r\nexport default Filter;\r\n\r\nFilter.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  filter: PropTypes.string.isRequired,\r\n  handleFilter: PropTypes.func.isRequired,\r\n};","\r\nimport Filter from \"./Filter\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../redux/action\";\r\nimport { getContact, getFilter } from \"../../redux/selector\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: getContact(state),\r\n  filter: getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  handleFilter: (filter) => dispatch(actions.filterContact(filter)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport './Logo.css';\r\n\r\nconst Logo = () => {\r\n  return (\r\n    <CSSTransition in timeout={600} classNames=\"Logo\" appear>\r\n      <h1>Phonebook</h1>\r\n    </CSSTransition>\r\n  );\r\n};\r\n\r\nexport default Logo;","import React, { Component } from 'react';\r\nimport ContactList from '../ContactList/ContactListContainer';\r\nimport ContactForm from '../ContactForm/ContactFormContainer';\r\nimport Filter from '../Filter/FilterContainer';\r\nimport styles from './App.module.css';\r\nimport Logo from '../Logo/Logo';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    isVisible: false,\r\n    filter: '',\r\n    };\r\n\r\n  componentDidMount() {\r\n    this.setState({isVisible: true});\r\n    \r\n  }\r\n\r\n  setFilter = ({ target }) => {\r\n    this.setState({\r\n      filter: target.value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.container}>\r\n        <Logo  />\r\n        <ContactForm />\r\n        <h2>Contacts</h2>\r\n        <Filter />\r\n        <ContactList />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n    \r\n\r\n       \r\n         \r\n        \r\n        \r\n          \r\n        \r\n        \r\n\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport { addContact, deleteContact, filterContact } from './action';\r\n\r\nconst initialState = {\r\n  contacts: [\r\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n  ],\r\n  filter: '',\r\n};\r\n\r\nconst contactsReducer = createReducer(initialState.contacts, {\r\n  [addContact]: (state, { payload }) => {\r\n    const nameExist = state.find(({ name }) => name === payload.name);\r\n    if (nameExist) {\r\n      alert(`${payload.name} is already in contact`);\r\n      return state;\r\n    }\r\n    return [...state, payload];\r\n  },\r\n  [deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filterReducer = createReducer(initialState.filter, {\r\n  [filterContact]: (state, { payload }) => {\r\n    return (state = payload);\r\n  },\r\n});\r\n\r\nexport default combineReducers({\r\n  contacts: contactsReducer,\r\n  filter: filterReducer,\r\n});","import { createStore } from \"@reduxjs/toolkit\";\r\nimport contactsReducer from \"./reducer\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport { devToolsEnhancer } from \"redux-devtools-extension\";\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, contactsReducer);\r\n\r\nexport const store = createStore(persistedReducer, devToolsEnhancer());\r\nexport const persistor = persistStore(store);","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App/App\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store, persistor } from \"./redux/store\";\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <PersistGate loading={null} persistor={persistor}>\r\n      <App />\r\n    </PersistGate>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);"],"sourceRoot":""}